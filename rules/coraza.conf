# -- Rule engine initialization ----------------------------------------------

# Enable Coraza, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
SecRuleEngine On


# -- Request body handling ---------------------------------------------------

# Allow Coraza to access request bodies. If you don't, Coraza
# won't be able to see any POST parameters, which opens a large security
# hole for attackers to exploit.
#
SecRequestBodyAccess On

# Enable XML request body parser.
# Initiate XML Processor in case of xml content-type
#
SecRule REQUEST_HEADERS:Content-Type "^(?:application(?:/soap\+|/)|text/)xml" \
     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

# Enable JSON request body parser.
# Initiate JSON Processor in case of JSON content-type; change accordingly
# if your application does not use 'application/json'
#
SecRule REQUEST_HEADERS:Content-Type "^application/json" \
     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

# Enable JSON request body parser for more subtypes.
# Adapt this rule if you want to engage the JSON Processor for "+json" subtypes
#
SecRule REQUEST_HEADERS:Content-Type "^application/[a-z0-9.-]+[+]json" \
     "id:'200006',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

# Maximum request body size we will accept for buffering. If you support
# file uploads, this value must has to be as large as the largest file
# you are willing to accept.
SecRequestBodyLimit 8388608

# Maximum request body size that Coraza will store in memory. If the body
# size exceeds this value, it will be saved to a temporary file on disk.
SecRequestBodyInMemoryLimit 131072

# Maximum request body size we will accept for buffering, with files excluded.
# You want to keep that value as low as practical.
# Note: SecRequestBodyNoFilesLimit is currently NOT supported by Coraza
# SecRequestBodyNoFilesLimit 131072

# What to do if the request body size is above our configured limit.
# Keep in mind that this setting will automatically be set to ProcessPartial
# when SecRuleEngine is set to DetectionOnly mode in order to minimize
# disruptions when initially deploying Coraza.
# Warning: Setting this directive to ProcessPartial introduces a potential bypass
# risk, as attackers could prepend junk data equal to or greater than the inspected body size.
#
SecRequestBodyLimitAction Reject

# Verify that we've correctly processed the request body.
# As a rule of thumb, when failing to process a request body
# you should reject the request (when deployed in blocking mode)
# or log a high-severity alert (when deployed in detection-only mode).
#
SecRule REQBODY_ERROR "!@eq 0" \
    "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"

# By default be strict with what we accept in the multipart/form-data
# request body. If the rule below proves to be too strict for your
# environment consider changing it to detection-only.
# Do NOT remove it, as it will catch many evasion attempts.
#
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
    "id:'200003',phase:2,t:none,log,deny,status:400, \
    msg:'Multipart request body failed strict validation."

# -- Response body handling --------------------------------------------------

# Allow Coraza to access response bodies. 
# You should have this directive enabled in order to identify errors
# and data leakage issues.
# 
# Do keep in mind that enabling this directive does increases both
# memory consumption and response latency.
#
SecResponseBodyAccess On

# Which response MIME types do you want to inspect? You should adjust the
# configuration below to catch documents but avoid static files
# (e.g., images and archives).
#
SecResponseBodyMimeType text/plain text/html text/xml

# Buffer response bodies of up to 512 KB in length.
SecResponseBodyLimit 524288

# What happens when we encounter a response body larger than the configured
# limit? By default, we process what we have and let the rest through.
# That's somewhat less secure, but does not break any legitimate pages.
#
SecResponseBodyLimitAction ProcessPartial


# -- Filesystem configuration ------------------------------------------------

# The location where Coraza will keep its persistent data. This default setting 
# is chosen due to all systems have /tmp available however, it
# too should be updated to a place that other users can't access.
#
SecDataDir /tmp/


# -- File uploads handling configuration -------------------------------------

# The location where Coraza stores intercepted uploaded files. This
# location must be private to Coraza. You don't want other users on
# the server to access the files, do you?
#
#SecUploadDir /opt/coraza/var/upload/

# If On, the WAF will store the uploaded files in the SecUploadDir
# directory.
# Note: SecUploadKeepFiles is currently NOT supported by Coraza
#
#SecUploadKeepFiles Off

# Uploaded files are by default created with permissions that do not allow
# any other user to access them. You may need to relax that if you want to
# interface Coraza to an external program (e.g., an anti-virus).
# Note: SecUploadFileMode is currently NOT supported by Coraza
#
#SecUploadFileMode 0600


# -- Debug log configuration -------------------------------------------------

# Default debug log path
# Debug levels:
# 0:   No logging (least verbose)
# 1:   Error
# 2:   Warn
# 3:   Info
# 4-8: Debug
# 9:   Trace (most verbose)
# 
#SecDebugLog /opt/coraza/var/log/debug.log
#SecDebugLogLevel 3


# -- Audit log configuration -------------------------------------------------

# Log the transactions that are marked by a rule, as well as those that
# trigger a server error (determined by a 5xx or 4xx, excluding 404,  
# level response status codes).
#
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:(5|4)(0|1)[0-9])$"

# Define which parts of the transaction are going to be recorded in the audit log
SecAuditLogParts ABIJDEFHZ

# Use a single file for logging. This is much easier to look at, but
# assumes that you will use the audit log only occasionally.
#
SecAuditLogType Serial

# The format used to write the audit log.
# Can be one of JSON|JsonLegacy|Native|OCSF
SecAuditLogFormat Native

# The following settings are not supported by Coraza
# SecCookieFormat 0
# SecArgumentSeparator &
# SecRule MULTIPART_UNMATCHED_BOUNDARY "@eq 1" \
#    "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"
# SecRule TX:/^COR_/ "!@streq 0" \
#       "id:'200005',phase:2,t:none,deny,msg:'Coraza internal error flagged: %{MATCHED_VAR_NAME}'"



# SecRule REQUEST_HEADERS:X-JA4 "@pmFromFile rules/ja4_blacklist.txt" \
#     "id:1002,phase:1,deny,log,msg:'Blocked REQUEST with malicious JA4 fingerprint'"

# SecRule RESPONSE_HEADERS:X-JA4 "@pmFromFile rules/ja4_blacklist.txt" \
#     "id:1003,phase:1,deny,log,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"

# SecRule REQUEST_HEADERS:X-JA4 "@contains t13i020000_04659ec43a24_000000000000" "id:1002,phase:1,deny,status:403,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"
# SecRule REQUEST_HEADERS:X-JA4 "@contains t13i020000_04659ec43a24_000000000000f" "id:1003,phase:1,deny,status:403,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"

SecRule REQUEST_HEADERS:X-JA4 "@pmFromFile ja4+_blacklist.txt" \
    "id:1002,phase:1,deny,status:403,msg:'Blocked REQUEST with malicious JA4 fingerprint'"

SecRule RESPONSE_HEADERS:X-JA4 "@pmFromFile ja4+_blacklist.txt" \
    "id:1003,phase:1,deny,status:403,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"


# Added Rules
# ------------------------------------------------------------------------
# [MFA Bypass] Detect suspicious 2FA code values (000000 or null)
# These are often accepted due to weak backend validation.
# ------------------------------------------------------------------------
SecRule REQUEST_URI "@contains /2fa/verify" \
    "id:210001,phase:2,t:none,log,deny,status:403, \
    msg:'MFA Bypass attempt: suspicious 2FA code (000000 or null)', \
    tag:'application-mfa',tag:'bypass-attempt', \
    chain"
    SecRule REQUEST_BODY "@rx \"otp\"\\s*:\\s*\\\"?(000000|null)\\\"?" 
#commands Injections
#-----------------------------------------------------------------

SecRule ARGS|REQUEST_URI "@rx [;|&`]+\\s*(id|ls|netstat|cat)(\\b|\\s|;|\\||\\n|$)" \
    "id:933011200,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Detected use of id/ls/netstat/cat with injection characters',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/1',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx `\\s*(id|ls|cat|netstat|/usr/bin/id)\\s*`" \
    "id:933011201,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Backtick execution of command',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/1',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx (\\n|%0a)\\s*(id|ls|cat|netstat|/usr/bin/id)\\s*(\\n|%0a)?" \
    "id:933011202,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Command preceded or followed by newline',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/1',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx <\!--#exec\\s+cmd=\\\".*(id|cat|ls|netstat).*\\\"-->" \
    "id:933011203,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: SSI directive with command execution',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx ;\\s*system\\(\\s*['\"]?(id|ls|cat|netstat|/usr/bin/id)['\"]?\\s*\\)" \
    "id:933011204,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Detected system() call with command',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx <\!--#exec\s+cmd=\\\"(/bin/cat\s+/(etc/passwd|etc/shadow)|/usr/bin/id(;)?|id(;)?|netstat\s+-a(;)?).*\\\"-->" \
    "id:93301114,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,\
    msg:'Command Injection: SSI exec command detected',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx ([;|`]\s*)(id|/usr/bin/id|netstat\s+-a)([;|`]|$)" \
    "id:93301115,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: command execution via special characters (;, |, `)',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx \|+(/usr/bin/)?id\|*" \
    "id:93301116,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: id or /usr/bin/id wrapped in pipes',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx (?i)([\|\&\;]\s*)(/usr/bin/)?(id|ls|cat|ping)(\b|[^a-zA-Z])" \
    "id:9330201,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: pipe/semicolon with common binaries (id, ls, cat, ping)',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx (?i)(%0a|\\n)(/usr/bin/)?(id|cat)([^a-zA-Z]|$)" \
    "id:9330202,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: encoded newline with id/cat',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecRule ARGS|REQUEST_URI "@rx (?i);?\s*system\s*\(\s*['\]?(/usr/bin/)?(id|cat)[^)]*\)" \
    "id:9330203,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: use of system() with id or cat',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    tag:'platform-unix',\
    tag:'language-bash',\
    ver:'OWASP_CRS/4.14.0-dev',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


SecRule ARGS|REQUEST_URI "@rx (?i)[\&\|\;]?\s*ping\s+(-i|-n)?\s*\d+\s+127\.0\.0\.1" \
    "id:9330204,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: ping sleep attempt',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx [`$][^a-zA-Z0-9]?(/usr/bin/)?(id|cat|ping)" \
    "id:9330205,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: backtick or dollar-execution with common binaries',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
 #-------------------------------------------
    SecRule ARGS|REQUEST_URI "@rx (?i)(?:\b|[^a-z0-9/])((?:/usr/bin/|)[id|cat])([^a-z0-9;|%27%22%0A]|$)" \
    "id:9330310,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,\
    msg:'Command Injection: Execution of id, cat, or malicious commands with delimiters or encoding',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/2',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
    #------------
    #------------
    #-----------
#----------------------------------------------------
# #Rule for Hidden Parameter Detection
SecRule ARGS_NAMES|ARGS "@rx ^(?i:(debug|test|config|env|hidden|bypass|stage|internal|dev|beta|is_admin|is_root|enable|superuser|__.*))$" \
    "chain,\
    id:9411999,\
    phase:2,\
    block,\
    t:none,\
    msg:'Hidden or Suspicious Parameter with Dangerous Value Detected',\
    logdata:'Parameter %{MATCHED_VAR_NAME} = %{MATCHED_VAR}',\
    tag:'hidden-parameter',\
    tag:'privilege-escalation',\
    tag:'attack-probing',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/Coraza-custom',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
    SecRule MATCHED_VAR "@rx ^(?i:(1|true|yes|enable|on))$" "t:none"
#--------------------------------------------------
#MongoDB and NoSql
# Enhanced MongoDB/NoSQL Injection Rule
SecRule ARGS|REQUEST_BODY "@rx (?i)([`\"']?\$where[`\"']?\s*:\s*[`\"']?1\s*==\s*1[`\"']?|[:=]\s*1\s*==\s*1|[`\"']?\$ne[`\"']?\s*:\s*1|[`\"']?\$gt[`\"']?\s*:\s*[`\"']?|[`\"']?\$lt[`\"']?\s*:\s*[`\"']?|[,;]\s*\$or\s*:\s*\[.*?\]|this\.password(?:zz)?\.match\s*\(.*?\)|mapReduce\s*\(function\s*\(|sleep\(\d+\)|0;\s*return\s*true|return\s*['\"`]?a['\"`]?==['\"`]?a|db\.(?:injection|stores)\.(?:insert|mapReduce)|\[\$ne\]=1|%00|%20&&%20.*password.*match)" \
    "id:9413210,\
    phase:2,\
    block,\
    t:none,t:urlDecode,t:urlDecodeUni,t:lowercase,\
    msg:'MongoDB/NoSQL Injection Detected (Improved)',\
    logdata:'Matched Payload: %{TX.0}',\
    severity:'2',\
    tag:'application-nosql',\
    tag:'attack-nosql-injection',\
    tag:'coraza-custom',\
    ver:'OWASP_CRS/MongoDB-Injection-Plus',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
    #
    #for the last 16 payloads that prevous rule don't catch them
    #


# Rule name: Abnormal character encoding requests
# Threat level: High
# Description: Hackers typically use an exception charset in the Content Type header to define character set encoding to bypass WAF protection, such as IBM037, IBM500, cp875, etc

SecRule REQUEST_HEADERS:Content-Type "!@rx charset\s*=\s*(utf-8|gbk|gb2312|iso-8859-1|iso-8859-15|windows-1252)" \
    "id:100001,phase:1,block,log,msg:'Abnormal charset in Content-Type header',severity:2"

# # Rule name: Abnormal Cookies
# # Threat level: Medium
# # Description: Block outdated cookie versions with support for $Version and double quotation mark values to prevent WAF from being bypassed and to attack websites.
SecRule REQUEST_HEADERS:Cookie "@rx \$Version\s*=\s*|=\s*\\\"" \
    "id:100002,phase:1,block,log,msg:'Abnormal cookie version detected with $Version and quotes',severity:'2'"


# Rule name: ASP malformed encoding filtering
# Threat level: Critical
# Description: Abnormal encoding of Unicode in ASP can cause WAF bypass hazards.

SecRule REQUEST_URI "@rx %u00(?:aa|ba|d0|de|e2|f0|fe)" \
    "id:100007,phase:1,block,log,msg:'Abnormal Unicode encoding detected in ASP',severity:CRITICAL"

# Rule name: Boundary exception interception
# Threat level: Critical
# Description: Intercept the abnormal boundary of multipart/form data in the content type header of the request, for example, PHP did not comply with the RFC specification when uploading and parsing the boundary, resulting in incorrect parsing of commas.

SecRule REQUEST_HEADERS:Content-Type "@rx boundary=" \
    "id:100008,phase:1,chain,block,log,msg:'Abnormal boundary detected in Content-Type header',severity:CRITICAL"
SecRule REQUEST_HEADERS:Content-Type "@rx ^boundary=[0-9A-Za-z\\-]+$" \
    "id:100009,phase:1,block,log,msg:'Boundary matches RFC specification',severity:CRITICAL"
SecRule REQUEST_HEADERS:Content-Type "@rx boundary.*=" \
    "id:100010,phase:1,block,log,msg:'Multiple boundaries detected in Content-Type header',severity:CRITICAL"

# Rule name: Command injection detection
# Threat level: Critical
# Description: Detect shell command injection attacks in URLs, cookies, and forms. The RCE semantic detection engine can be used to detect various deformations.

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS|REQUEST_URI "@rx (cat\$IFS|c\$()at|/e\?\?/p\?\?\?\?)" \
    "id:100016,phase:2,block,log,msg:'Command injection detected',severity:CRITICAL"
    
# Rule name: Cross Site Scripting (XSS) Attack
# Threat level: Critical
# Description: Attackers typically insert JavaScript, VBScript, ActiveX, or Flash into vulnerable programs to deceive users. Once successful, they can steal user accounts, modify user settings, steal/contaminate cookies, create false advertising, and more.

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES|REQUEST_HEADERS:User-Agent|REQUEST_HEADERS:Referer "@rx \b(?:parent|frames|window|this|self|globalThis|top)\s*(?:/\*|\[\s*['/\"\\(])|\.\s*(?:constructor|getPrototypeOf)\s*\(" \
    "id:100017,phase:2,block,log,msg:'Cross Site Scripting (XSS) attack detected via DOM-based pattern',severity:'CRITICAL'"


# Rule name: CVE-2025-24813 Tomcat RCE
# Threat level: Critical
# Description: Filter the Tomcat remote code execution vulnerability (CVE-2025-24813)

SecRule REQUEST_METHOD "PUT" \
    "id:100018,phase:2,chain,log,block,msg:'CVE-2025-24813 Tomcat RCE detected',severity:'CRITICAL'"

SecRule REQUEST_URI "@endsWith /session" \
    "chain"

SecRule REQUEST_HEADERS:Content-Range "@rx .+"

# Detect requests to static/media/downloadable resources
SecRule REQUEST_URI "@rx \.(zip|rar|7z|tar|gz|bz2|xz|iso|dmg|exe|msi|pkg|apk|deb|rpm|mp4|mov|avi|wmv|flv|mkv|webm|m4v|3gp|png|svg|jpg|jpeg|gif|webp|bmp|tiff|ico|psd|ttf|woff|woff2|eot|otf|css|js|json|xml|txt|rtf|csv)$" \
    "id:100030,phase:1,block,log,msg:'Access to static/downloadable resource detected - potential scraping attempt',severity:'3'"

# Step 1: Identify sensitive resources (downloads, images, videos)
SecRule REQUEST_URI "@rx \.(zip|rar|7z|tar|gz|bz2|xz|iso|dmg|exe|msi|pkg|apk|deb|rpm|mp4|mov|avi|wmv|flv|mkv|webm|m4v|3gp|png|svg|jpg|jpeg|gif|webp|bmp|tiff|ico|psd|ttf|woff|woff2|eot|otf|css|js|json|xml|txt|rtf|csv)$" \
    "id:300001,phase:1,pass,nolog,setvar:tx.sensitive_request=1"
# Step 2: Count requests per IP
SecRule REMOTE_ADDR "@rx ^.*$" \
    "id:300002,phase:1,pass,nolog,setvar:tx.total_visits=+1"
# Step 3: Define static thresholds due to Coraza limitations (dynamic logic simplified)
SecRule TX:total_visits "@gt 300" \
    "id:300003,phase:1,pass,nolog,setvar:tx.dynamic_factor=20,setvar:tx.mode='High mode'"

SecRule TX:total_visits "@le 300" \
    "id:300004,phase:1,pass,nolog,setvar:tx.dynamic_factor=50,setvar:tx.mode='Medium mode'"

SecRule TX:total_visits "@le 200" \
    "id:300005,phase:1,pass,nolog,setvar:tx.dynamic_factor=100,setvar:tx.mode='Low mode'"

# Step 4: Set simplified fixed threshold
SecAction \
    "id:300006,phase:1,pass,nolog,setvar:tx.base_threshold=30"
# Step 5: Track per-request resource access
SecRule TX:sensitive_request "@eq 1" \
    "id:300007,phase:1,pass,nolog,setvar:tx.resource_access=+1"

# Step 6: Block if current request exceeds threshold (simplified for demo)
SecRule TX:resource_access "@ge %{tx.base_threshold}" \
    "id:300008,phase:1,deny,status:403,log,msg:'Resource scraping detected - %{REMOTE_ADDR} exceeded request threshold.',severity:'2'"

# Rule Name: FastJSON vulnerability interception
# Threat level: Critical
# Description: Intercept FastJSON vulnerability attacks

SecRule REQUEST_METHOD "@rx ^(POST|PUT)$" \
    "id:300009,phase:2,chain,block,log,msg:'FastJSON vulnerability detected in request body',severity:'CRITICAL',t:none"
    SecRule REQUEST_BODY "@rx \{.*\"@type\"\s*:.*\}"

# Rule name: HTTP Request Smuggling
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detect HTTP request smuggling via injection of HTTP method strings.

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES "@rx (?i)(get|post|head|options|connect|put|delete|trace|track|patch|propfind|propatch|mkcol|copy|move|lock|unlock)\s+[^\s]+\s+HTTP/\d" \
    "id:300010,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'HTTP Request Smuggling attempt detected in request parameters or cookies',severity:'CRITICAL'"

# Rule name: Header vulnerability
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detect headers that exploit vulnerabilities like httpoxy (proxy header),
# and CVE-2017-7269 (If and Lock-Token headers causing overflow on IIS 6.0).

SecRule REQUEST_HEADERS_NAMES "@rx ^(?:proxy|lock-token|if)$" \
    "id:300011,phase:1,block,log,msg:'Dangerous HTTP header detected (%{MATCHED_VAR})',severity:'CRITICAL'"

# Rule name: HTTP Response Splitting
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detect CRLF characters that could lead to HTTP response splitting.
# Reference: http://projects.webappsec.org/HTTP-Response-Splitting

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES "@rx [\r\n]\W*?(?:content-(?:type|length)|set-cookie|location):\s*\w" \
    "id:100012,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'HTTP Response Splitting attempt detected in parameters or cookies',severity:'CRITICAL'"

# Rule name: HTTP Splitting
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detect newline or carriage return characters in REQUEST_URI.
# Reference: https://www.owasp.org/index.php/Testing_for_HTTP_Splitting/Smuggling_(OTG-INPVAL-016)

SecRule REQUEST_URI "@rx [\n\r]" \
    "id:100013,phase:1,t:none,block,log,msg:'HTTP Splitting attempt detected in REQUEST_URI',severity:'CRITICAL'"

# Rule Name: ImageMagick Arbitrary Command Vulnerability
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detects attempts to exploit ImageMagick vulnerabilities via malicious image upload.

SecRule FILES|FILES_NAMES "@rx (?i)(push\s+graphic-context|<\s*image\b)" \
    "id:100015,phase:2,t:none,block,log,msg:'ImageMagick vulnerability exploitation attempt detected in file upload',severity:'CRITICAL'"

# Rule Name: Directory Listing and Source Code Leakage
# Filtering stage: Response body
# Threat level: High
# Description: Detects directory listing pages and potential source code leakage from server responses.

SecRule RESPONSE_BODY "@rx (?i)(<title>Index of.*?<h1>Index of|>\[To Parent Directory\]</a><br>|^\s*(?:#!\s?/|<%|<\?\s*[^x]|<jsp:))" \
    "id:300012,phase:4,t:none,block,log,msg:'Directory listing or source code leakage detected in response',severity:'1'"

# Rule Name: ImageMagick Filename Check
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detect suspicious ImageMagick attack patterns in uploaded file names.

SecRule FILES_NAMES "@rx (?i)(push\s+graphic-context|<\s*image\b)" \
    "id:300013,phase:2,t:none,block,log,msg:'Suspicious ImageMagick content pattern in uploaded filename',severity:'CRITICAL'"

# Rule name: Java Security Rule Set
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detects vulnerabilities related to Log4j, Java serialization, Spring Framework RCE, and SSTI attacks.

SecRule REQUEST_URI|ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_HEADERS "@rx (?i)(\$\{(?:j[n|\$])|\$\{\w*:)|(^\xac\xed\x00\x05|aced0005|rO0AB[XQ]|KztAAU|Cs7QAF)|([#\.]\s*context\s*\.\s*[a-z]{3,})|(\{\{.+\}\})|(^\s*(<%|<\?\s*[^x]|<jsp:))" \
    "id:300014,phase:2,t:urlDecodeUni,t:base64Decode,t:none,block,log,msg:'Java-related vulnerability attack detected: %{MATCHED_VAR}',severity:'CRITICAL'"

# Rule name: JSON Command Injection Detection
# Filtering stage: Request body phase
# Threat level: Critical
# Description: Detect command injection attacks in JSON request body.

SecRule REQUEST_BODY "@rx (?i)(\b(cat|bash|sh|zsh|nc|wget|curl|perl|python|ruby|php)\b.*(\||;|\$\(.*\)|`.*`|\$\{.*\}))" \
    "id:300015,phase:2,t:none,block,log,msg:'JSON command injection attempt detected in request body',severity:'CRITICAL'"

# Rule name: JSON SQL Injection Detection
# Filtering stage: Request body phase
# Threat level: Critical
# Description: Detect SQL injection attacks in JSON request body.

SecRule REQUEST_BODY "@rx (?i)(\b(union|select|update|delete|insert|truncate|exec|execute|drop|alter|create)\b\s+[^\s]+|\bor\b\s+\d+=\d+|\b(and|or)\b\s+['\"][^'\"]+['\"]=['\"][^'\"]+['\"]|['\"].*?--|/\*.*?\*/|;.*?$)" \
    "id:100019,phase:2,t:none,block,log,msg:'JSON SQL injection attempt detected in request body',severity:'CRITICAL'"

# Rule Name: LDAP Injection Detection
# Filtering stage: Request phase
# Threat level: Critical
# Description: Detect LDAP injection patterns in request parameters, cookies, and query strings.

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_COOKIES_NAMES "@rx (?i)(\*\)|\)\(|\([&|!]|[&|!]\s*\()" \
    "id:100020,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'LDAP injection attempt detected in request',severity:'CRITICAL'"

# Rule Name: Path Traversal Detection
# Filtering stage: Request phase
# Threat level: High
# Description: Detect path traversal patterns (../ or ..\) in request URI, arguments, headers, and file uploads.

SecRule REQUEST_URI|ARGS|ARGS_NAMES|REQUEST_HEADERS|FILES_NAMES "@rx (\.\./|\.\.\\)" \
    "id:100021,phase:2,t:urlDecodeUni,t:base64Decode,block,log,msg:'Path traversal attempt detected in request',severity:'1'"

# Rule Name: PHP Error Information Leakage
# Filtering stage: Response body
# Threat level: Low
# Description: Detect PHP error messages in response body that may leak sensitive server information.

SecRule RESPONSE_STATUS "@streq 500" \
    "id:100022,phase:4,chain,t:none"
    SecRule RESPONSE_BODY "@rx (?i)(PHP (Parse|Fatal|Warning|Notice|Deprecated|Strict Standards|Exception)|on line \d+|Stack trace:|Uncaught exception)" \
        "block,log,msg:'PHP error leakage detected in response body',severity:'3'"

# Rule Name: PHP Security Rule Set
# Filtering stage: Request phase
# Threat level: High
# Description: Detect PHP serialization attacks, PHP wrapper attacks, and suspicious PHP function calls.

SecRule REQUEST_URI|ARGS|REQUEST_COOKIES|REQUEST_HEADERS "@rx (?i)(php://(stdin|stdout|stderr|input|output|fd|memory|temp|filter)|ssh2\.(sftp|scp|shell|exec)|zlib://|zip://|phar://|expect://|bzip2://|glob://|ogg://|phpinfo\s*\(\s*\)|[oOcC]:\d+:\".*?\":\d+:{.*?})" \
    "id:100023,phase:2,t:urlDecodeUni,t:base64Decode,block,log,msg:'PHP security threat detected in request',severity:'1'"

# Rule Name: Proxy Header SQL Injection
# Filtering stage: Request phase
# Threat level: High
# Description: Detect single quote-based SQL injection in proxy-related headers.

SecRule REQUEST_HEADERS:X-Forwarded-For|REQUEST_HEADERS:X-Real-IP|REQUEST_HEADERS:Client-IP "@contains '" \
    "id:100024,phase:1,t:none,block,log,msg:'Potential SQL injection detected in proxy header (%{MATCHED_VAR_NAME})',severity:'1'"

# Rule Name: Regional Access Restrictions
# Filtering stage: Request phase
# Threat level: Low
# Description: Allow requests only from designated countries (e.g., United States).

SecRule GEO:COUNTRY_CODE "!@streq US" \
    "id:100025,phase:1,block,log,msg:'Access from country %{GEO.COUNTRY_CODE} is restricted',severity:'3'"

# Rule Name: Uncommon HTTP Method Detection
# Threat level: Low
# Description: Block uncommon HTTP methods (e.g., TRACE, CONNECT, PATCH).

SecRule REQUEST_METHOD "!@rx ^(?:GET|HEAD|POST|PUT|DELETE|OPTIONS)$" \
    "id:100027,phase:1,t:none,block,log,msg:'Uncommon or potentially dangerous HTTP method detected: %{REQUEST_METHOD}',severity:'3'"

# Rule Name: Remote File Inclusion (RFI)
# Threat level: Critical
# Description: Detects use of URL-based schemes in request parameters to exploit file inclusion.

SecRule ARGS|ARGS_NAMES "@rx ^\s*(?:url|jar)?(file|ftp|ftps|gopher|ldap)://" \
    "id:100028,phase:2,t:urlDecodeUni,t:none,block,log,msg:'Remote File Inclusion attempt detected via parameter (%{MATCHED_VAR_NAME})',severity:'CRITICAL'"

# Rule Name: Scanner Detection
# Threat level: Medium
# Description: Detect known vulnerability scanners (e.g., sqlmap, awvs, Nessus, AppScan, etc.)

SecRule REQUEST_HEADERS:User-Agent "@rx (?i)(sqlmap|nmap|nikto|acunetix|netsparker|nessus|qualys|w3af|appscan|wpscan|awvs)" \
    "id:100032,phase:1,t:none,block,log,msg:'Scanner detected by User-Agent header (%{MATCHED_VAR})',severity:'2'"

# Rule Name: Sensitive File Leak Detection
# Threat level: Medium
# Description: Detect access to sensitive files like .git, .svn, .sql, .log, .bak, etc.

SecRule REQUEST_URI "@rx (?i)\.(git|svn|bak|old|swp|sql|log|conf|env|ini)(\.|/|$)" \
    "id:100033,phase:1,t:none,block,log,msg:'Sensitive file access attempt detected (%{REQUEST_URI})',severity:'2'"

# Rule Name: Shellshock Detection
# Threat level: Critical
# Description: Detect GNU Bash Shellshock vulnerability in headers and request line.

SecRule REQUEST_HEADERS|REQUEST_LINE "@rx \(\s*\)\s*\{" \
    "id:100034,phase:1,t:urlDecodeUni,t:none,block,log,msg:'Shellshock attack pattern detected in request headers or line',severity:'CRITICAL'"


# Rule Name: SQL Error Information Leakage
# Threat level: High
# Description: Detect SQL error messages in server responses for multiple database engines.

SecRule RESPONSE_STATUS "@streq 500" \
    "id:100035,phase:4,chain,t:none"
    SecRule RESPONSE_BODY "@rx (?i)(Microsoft OLE DB|SQL syntax.*MySQL|ORA-[0-9]{4}|PostgreSQL.*ERROR|DB2 SQL error|Sybase.*Server message|SQLite\\.Exception|System\\.Data\\.SqlClient|JET Database Engine|Access Database Engine|CLI Driver.*DB2|Dynamic SQL Error|Unclosed quotation mark|mysql_fetch_array|Npgsql|pg_query\(|valid PostgreSQL result|Exception condition \d+|Warning.*pg_|PG::[a-zA-Z]*Error)" \
        "block,log,msg:'SQL error message leakage detected in response',severity:'1'"

# Rule Name: SQL Injection Detection
# Threat level: Critical
# Description: Detect common SQL injection attempts in request payloads.

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_HEADERS "@rx (?i)(\b(select|update|insert|delete|drop|truncate|exec|union|or|and)\b\s+\S+|\b(or|and)\b\s+\d+=\d+|['\"].*?--|/\*.*?\*/|;.*?$)" \
    "id:100036,phase:2,t:urlDecodeUni,t:none,block,log,msg:'SQL Injection attempt detected in request',severity:'CRITICAL'"

# Rule Name: Upload File Content Filtering
# Threat level: Critical
# Description: Detects WebShell or malicious code in uploaded file content.

SecRule FILES_TMP_CONTENT "@rx (?i)(<\?.+?\$(GLOBALS|_GET|_POST|_COOKIE|_REQUEST|_SERVER|_FILES|_SESSION|_ENV)|<\?php|<jsp:|<%(!|\s*@|.*?\brequest\s*(\.|\())?)" \
    "id:300039,phase:2,t:none,block,log,msg:'Suspicious upload content detected (potential webshell)',severity:'CRITICAL'"

# Rule Name: Universal Injection Detection (Ruby, Node, JS, Perl)
# Phase: 2
# Threat level: High

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_HEADERS "@rx Process\s*\.\s*spawn\s*\(" \
    "id:100037,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'Ruby Injection Detected via spawn()',severity:'2'"

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_HEADERS "@rx (this\.constructor|truncateSync\s*\(|\bspawn\s*\(|\beval\s*\(|String\s*\.?\s*fromCharCode|_\$\$ND_FUNC\$\$_|_js_function)" \
    "id:100038,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'Node.js Injection Detected',severity:'2'"

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_HEADERS "@rx (__proto__|constructor\s*(\.|\[)\s*prototype)" \
    "id:100039,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'JavaScript Prototype Pollution Detected',severity:'2'"

SecRule ARGS|ARGS_NAMES|REQUEST_COOKIES|REQUEST_HEADERS "@rx \@\{.*?\}" \
    "id:100040,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'Possible Perl Code Injection Detected',severity:'2'"

# Rule Name: Upload File Name Filtering
# Threat level: Critical
# Description: Detect dangerous extensions in uploaded file names to prevent WebShell or binary upload.

SecRule FILES_NAMES "@rx \.(as|cer\b|cdx|ph|jsp|war|class|exe|ht|env|user\.ini|php\.ini)$" \
    "id:100042,phase:2,t:htmlEntityDecode,t:none,block,log,msg:'Dangerous file extension detected in uploaded file name (%{MATCHED_VAR})',severity:'CRITICAL'"

# Rule Name: XXE Attack Detection
# Threat level: Critical
# Description: Detects XXE attempts via SYSTEM and ENTITY usage in raw XML content.

SecRule REQUEST_BODY "@rx <!(DOCTYPE|ENTITY)[^>]+?\bSYSTEM\b" \
    "id:100043,phase:2,t:urlDecodeUni,t:htmlEntityDecode,block,log,msg:'Possible XXE Attack Detected in XML Payload',severity:'CRITICAL'"

